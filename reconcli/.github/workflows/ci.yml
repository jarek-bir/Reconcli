name: ReconCLI CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Static Code Analysis
  lint:
    name: "üîç Code Quality & Linting"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety mypy
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run Black (Code Formatting)
        run: |
          black --check --diff .

      - name: Run isort (Import Sorting)
        run: |
          isort --check-only --diff .

      - name: Run Flake8 (Style Guide)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=15 --max-line-length=88 --statistics

      - name: Run Bandit (Security Linting)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Run Safety (Dependency Security Check)
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  test:
    name: "üß™ Unit Tests (Python ${{ matrix.python-version }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install -e .
        shell: bash

      - name: Run Tests with Coverage
        run: |
          pytest --cov=./ --cov-report=xml --cov-report=html --cov-report=term -v

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  # Integration Tests (Linux only, requires external tools)
  integration:
    name: "üîß Integration Tests"
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nmap dnsutils curl wget

      - name: Install Go tools (for external dependencies)
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install external security tools
        run: |
          # Install common security tools used by ReconCLI
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          go install github.com/tomnomnom/gf@latest
          go install github.com/lc/gau/v2/cmd/gau@latest
          go install github.com/ffuf/ffuf@latest
          go install github.com/projectdiscovery/katana/cmd/katana@latest

          # Install SQL injection tools
          sudo apt-get install -y sqlmap
          pip install ghauri

          # Add Go bin to PATH
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .

      - name: Run Integration Tests
        run: |
          # Test basic CLI functionality
          python -m reconcli --help

          # Test individual modules (with safe/mock targets)
          python -c "from reconcli import dnscli, urlcli, vulncli; print('All modules imported successfully')"

          # Test vulnerability scanning with safe patterns
          echo "http://testphp.vulnweb.com/" > test_targets.txt
          python -m reconcli vulncli --input test_targets.txt --engine nuclei --dry-run --verbose || true

          # Test SQL injection vulnerability scanner
          echo "http://testphp.vulnweb.com/artists.php?artist=1" > test_sqli_urls.txt
          python -m reconcli vulnsqlicli --check-tools || true
          python -m reconcli vulnsqlicli --url "http://testphp.vulnweb.com/artists.php?artist=1" --basic-test --verbose || true
          python -m reconcli vulnsqlicli --urls-file test_sqli_urls.txt --basic-test --json-report --verbose || true

          # Test directory brute force
          python -m reconcli dirbcli --check-tools || true
          python -m reconcli dirbcli --url "http://testphp.vulnweb.com/" --wordlist /usr/share/dirb/wordlists/common.txt --dry-run --verbose || true

          # Test virtual host discovery
          python -m reconcli vhostcli --domain "testphp.vulnweb.com" --ip "44.228.249.3" --wordlist /usr/share/dirb/wordlists/common.txt --dry-run --verbose || true

      - name: Cleanup
        if: always()
        run: |
          rm -f test_targets.txt test_sqli_urls.txt

  # Documentation Build Test
  docs:
    name: "üìö Documentation Build"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser
          if [ -f docs/requirements.txt ]; then pip install -r docs/requirements.txt; fi

      - name: Build documentation
        run: |
          # Check if docs directory exists
          if [ -d "docs" ]; then
            cd docs
            make html || echo "Sphinx build not configured yet"
          else
            echo "Documentation build skipped - docs directory not found"
          fi

      - name: Validate README
        run: |
          # Check README for basic structure
          python -c "
          import sys
          with open('README.md', 'r') as f:
              content = f.read()
              if 'vulncli' not in content:
                  print('‚ùå README missing vulncli documentation')
                  sys.exit(1)
              if '## Features' not in content:
                  print('‚ùå README missing Features section')
                  sys.exit(1)
              print('‚úÖ README validation passed')
          "

  # Security Scan
  security:
    name: "üõ°Ô∏è Security Scan"
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Build and Package
  build:
    name: "üì¶ Build Package"
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'release' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel setuptools

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Release to PyPI (only on release)
  release:
    name: "üöÄ Release to PyPI"
    runs-on: ubuntu-latest
    needs: [lint, test, integration, security, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Notification
  notify:
    name: "üì¢ Notify"
    runs-on: ubuntu-latest
    needs: [lint, test, integration, docs, security]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Notify Discord (Success)
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{"content":"‚úÖ **ReconCLI CI/CD**: All checks passed for commit `${{ github.sha }}`"}' \
               ${{ secrets.DISCORD_WEBHOOK_URL || 'https://httpbin.org/post' }}

      - name: Notify Discord (Failure)
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{"content":"‚ùå **ReconCLI CI/CD**: Build failed for commit `${{ github.sha }}`. Check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details."}' \
               ${{ secrets.DISCORD_WEBHOOK_URL || 'https://httpbin.org/post' }}
